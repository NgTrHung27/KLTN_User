// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum GradeType {
  GPA
  CGPA
}

enum CertificateType {
  IELTS
  TOEFL
}

enum DegreeType {
  HIGHSCHOOL
  UNIVERSITY
}

enum UserRole {
  ADMIN
  STUDENT
}

enum StudentStatus {
  STUDYING
  DROPPED
  AWAITING
  APPROVED
}

model User {
  id            String    @id @default(cuid())
  studentCode   String    @unique
  // Account
  email         String    @unique
  emailVerified DateTime?
  password      String
  name          String
  // Profile
  dob           DateTime
  gender        Gender
  phoneNumber   String
  idCardNumber  String    @unique
  address       String

  image    String?
  // Education
  schoolId String
  school   School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  studentProgram StudentProgram?

  degreeType DegreeType

  certificateType CertificateType
  certificateImg  String

  gradeType  GradeType
  gradeScore Float

  // Student status
  status StudentStatus @default(AWAITING)

  // Role-based authentication
  role UserRole @default(STUDENT)

  // Two Factor Authentication
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  upadtedAt DateTime @updatedAt

  @@index([email, name, studentCode, schoolId])
}

model School {
  id            String  @id @default(cuid())
  logoUrl       String
  backgroundUrl String
  name          String  @unique
  colorValue    String
  isPublished   Boolean @default(false)

  users User[]

  programs Program[]

  createdAt DateTime @default(now())
  upadtedAt DateTime @updatedAt

  @@index([name])
}

model Program {
  id          String  @id @default(cuid())
  name        String
  description String
  coverImage  String?
  isPublished Boolean @default(false)

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  upadtedAt DateTime @updatedAt

  studentPrograms StudentProgram[]

  @@unique([schoolId, name])
  @@index([name])
}

model StudentProgram {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  programId String
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  upadtedAt DateTime @updatedAt

  @@unique([userId, programId])
  @@index([userId, programId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  upadtedAt DateTime @updatedAt

  @@unique([userId])
}
