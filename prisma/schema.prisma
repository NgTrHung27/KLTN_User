// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum GradeType {
  GPA
  CGPA
}

enum CertificateType {
  IELTS
  TOEFL
}

enum DegreeType {
  HIGHSCHOOL
  UNIVERSITY
}

enum UserRole {
  ADMIN
  STUDENT
}

enum StudentStatus {
  STUDYING
  DROPPED
  AWAITING
  APPROVED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  studentCode   String    @unique
  // Account
  email         String    @unique
  emailVerified DateTime?
  password      String
  name          String
  // Profile
  dob           DateTime
  gender        Gender
  phoneNumber   String
  idCardNumber  String    @unique
  address       String

  image    String?
  // Education
  schoolId String  @db.ObjectId
  school   School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  program StudentProgram?

  degreeType DegreeType

  certificateType CertificateType
  certificateImg  String

  gradeType  GradeType
  gradeScore Float

  // Student status
  status StudentStatus @default(AWAITING)

  // Role-based authentication
  role UserRole @default(STUDENT)

  // Two Factor Authentication
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // User Profile
  profile Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, name, studentCode, schoolId])
}

model School {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  logoUrl       String
  backgroundUrl String
  name          String
  colorValue    String
  isPublished   Boolean @default(false)

  users User[]

  programs Program[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model Program {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  coverImage  String?
  isPublished Boolean @default(false)

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentPrograms StudentProgram[]

  @@unique([schoolId, name])
  @@index([name])
}

model StudentProgram {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Scores

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  programId String  @db.ObjectId
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, programId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

enum ProfileStatus {
  ONLINE
  OFFLINE
  IDLE
  BUSY
  INVISIBLE
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  coverImage String?

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Status
  status ProfileStatus?

  // Feeds
  posts Post[]

  // Biography
  biography Biography?

  // Friends
  friends Friend[]

  // Groups
  groups ProfileGroup[]

  // Blogs
  blogs Blog[]

  // Events
  eventId String? @db.ObjectId
  event   Event?  @relation(fields: [eventId], references: [id])

  // Messages

  // Areas
  profiles ProfileArea[]

  // Socials
  socials Social[]

  // Comments
  postComments     PostComment[]
  postCommentLikes PostCommentLike[]

  // Posts liked
  postLikes PostLike[]

  // Posts shared
  postShares PostShare[]

  // Posts saved
  postSaved PostSave[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostStatus {
  PUBLIC
  PRIVATE
  FRIENDS
  EXCEPT
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content    String?
  postImages PostImage[]
  comments   PostComment[]
  likes      PostLike[]
  shares     PostShare[]
  saves      PostSave[]

  status PostStatus @default(PUBLIC)

  isArchived Boolean @default(false)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url String

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostComment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String?

  commentImage PostCommentImage?
  isArchived   Boolean           @default(false)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  children PostComment[] @relation("children")

  parentCommentId String?      @db.ObjectId
  parentComment   PostComment? @relation("children", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  likes PostCommentLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model PostCommentImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url String

  postCommentId String      @unique @db.ObjectId
  postComment   PostComment @relation(fields: [postCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PostCommentLike {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  postCommentId String      @db.ObjectId
  postComment   PostComment @relation(fields: [postCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PostLike {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model PostShare {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model PostSave {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  postId String @db.ObjectId
  post   Post?  @relation(fields: [postId], references: [id])

  @@index([profileId])
}

model Biography {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @unique @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @unique @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  users ProfileGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileGroup {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groupId String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("UserGroup")
}

model Blog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @unique @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profiles Profile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Area {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title String

  profiles ProfileArea[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
}

model ProfileArea {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  areaId String @db.ObjectId
  area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, areaId])
}

enum SocialType {
  YOUTUBE
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITCH
  TWITTER
  PORTFOLLIO
}

model Social {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type SocialType
  href String

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
